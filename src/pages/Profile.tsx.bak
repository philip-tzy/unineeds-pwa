import React from 'react';
import { useNavigate } from 'react-router-dom';
import { ArrowLeft, UserCircle, Settings, LogOut, Mail, Phone, MapPin, Award, BarChart3 } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { useAuth } from '@/context/AuthContext';
import BottomNavigation from '@/components/BottomNavigation';
import DriverBottomNavigation from '@/components/driver/BottomNavigation';
import SellerBottomNavigation from '@/components/seller/BottomNavigation';
import FreelancerBottomNavigation from '@/components/freelancer/BottomNavigation';
import { useToast } from '@/components/ui/use-toast';
import { 
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger
} from "@/components/ui/alert-dialog";
import SellerRoleSelection from "./pages/SellerRoleSelection";
import DriverRoleSelection from "./pages/DriverRoleSelection";
import RoleSelection from "./pages/RoleSelection";
import SkillsManager from '@/components/freelancer/SkillsManager';

const getRoleSpecificStats = (role: string, sellerType?: string | null, driverType?: string | null) => {
  switch (role) {
    case 'driver':
      let driverStatsLabel = 'Completed Trips';
      if (driverType === 'unisend') {
        driverStatsLabel = 'Completed Deliveries';
      } else if (driverType === 'unimove') {
        driverStatsLabel = 'Completed Rides';
      }
      return [
        { label: driverStatsLabel, value: 48, icon: <Award size={18} className="text-blue-500" /> },
        { label: 'Rating', value: '4.8', icon: <BarChart3 size={18} className="text-green-500" /> },
      ];
    case 'seller':
      if (sellerType === 'unishop') {
        return [
          { label: 'Products', value: 12, icon: <Award size={18} className="text-blue-500" /> },
          { label: 'Orders', value: 86, icon: <BarChart3 size={18} className="text-green-500" /> },
        ];
      } else { // unifood
        return [
          { label: 'Menu Items', value: 8, icon: <Award size={18} className="text-blue-500" /> },
          { label: 'Orders', value: 124, icon: <BarChart3 size={18} className="text-green-500" /> },
        ];
      }
    case 'freelancer':
      return [
        { label: 'Projects Completed', value: 26, icon: <Award size={18} className="text-blue-500" /> },
        { label: 'Rating', value: '4.9', icon: <BarChart3 size={18} className="text-green-500" /> },
      ];
    default: // customer
      return [
        { label: 'Orders', value: 12, icon: <Award size={18} className="text-blue-500" /> },
        { label: 'Favorites', value: 8, icon: <BarChart3 size={18} className="text-green-500" /> },
      ];
  }
};

const Profile: React.FC = () => {
  const navigate = useNavigate();
  const { user, logout } = useAuth();
  const { toast } = useToast();
  
  const handleLogout = async () => {
    try {
      await logout();
      toast({
        title: "Success",
        description: "You have been logged out successfully",
      });
      navigate('/login');
    } catch (error) {
      console.error('Error logging out:', error);
      toast({
        title: "Error",
        description: "There was a problem logging out",
        variant: "destructive",
      });
    }
  };
  
  const stats = getRoleSpecificStats(user?.role || 'customer', user?.seller_type, user?.driver_type);
  
  const renderBottomNavigation = () => {
    switch (user?.role) {
      case 'driver':
        return <DriverBottomNavigation driverType={user?.driver_type} />;
      case 'seller':
        return user?.seller_type ? <SellerBottomNavigation sellerType={user.seller_type} /> : null;
      case 'freelancer':
        return <FreelancerBottomNavigation />;
      default:
        return <BottomNavigation />;
    }
  };
  
  return (
    <div className="pb-20 bg-gray-50 min-h-screen">
      <div className="bg-[#9b87f5] pb-12 pt-6 px-4 relative">
        <button 
          onClick={() => navigate(-1)} 
          className="p-2 rounded-full bg-white/20 text-white absolute left-4 top-6"
        >
          <ArrowLeft size={20} />
        </button>
        <h1 className="text-white text-center font-semibold text-lg">Profile</h1>
      </div>
      
      <div className="px-4 -mt-10 space-y-4 pb-4">
        <div className="bg-white rounded-lg shadow-sm p-6 text-center relative">
          <div className="absolute right-4 top-4">
            <Button variant="ghost" size="sm" onClick={() => navigate('/edit-profile')}>
              <Settings size={18} />
            </Button>
          </div>
          <div className="flex flex-col items-center">
            <div className="bg-gray-100 p-4 rounded-full">
              <UserCircle size={60} className="text-gray-500" />
            </div>
            <h2 className="mt-3 font-semibold text-lg">{user?.full_name || user?.name}</h2>
            <p className="text-sm text-gray-500 capitalize">{user?.role}</p>
            {user?.role === 'seller' && user?.seller_type && (
              <div className="mt-1 bg-blue-50 text-blue-600 text-xs px-2 py-1 rounded-full">
                {user.seller_type === 'unishop' ? 'UniShop Seller' : 'UniFood Seller'}
              </div>
            )}
            {user?.role === 'driver' && user?.driver_type && (
              <div className="mt-1 bg-green-50 text-green-600 text-xs px-2 py-1 rounded-full">
                {user.driver_type === 'unimove' ? 'UniMove Driver' : 'UniSend Driver'}
              </div>
            )}
          </div>
          
          <div className="mt-4 space-y-2 text-left">
            <div className="flex items-center">
              <Mail size={16} className="text-gray-500 mr-2" />
              <p className="text-sm">{user?.email}</p>
            </div>
          </div>
        </div>
        
        <div className="bg-white rounded-lg shadow-sm p-6 mb-4">
          <h3 className="font-semibold mb-3">Your Stats</h3>
          <div className="grid grid-cols-2 gap-4">
            {stats.map((stat, index) => (
              <div key={index} className="flex items-center bg-gray-50 p-3 rounded-lg">
                <div className="bg-white p-2 rounded-full mr-3">
                  {stat.icon}
                </div>
                <div>
                  <p className="text-sm text-gray-500">{stat.label}</p>
                  <p className="font-bold">{stat.value}</p>
                </div>
              </div>
            ))}
          </div>
        </div>
        
        <div className="bg-white rounded-lg shadow-sm p-6 mb-4">
          <h3 className="font-semibold mb-3">Account Type</h3>
          <Button
            onClick={() => navigate('/role-selection')}
            variant="outline"
            className="w-full justify-between"
          >
            <span>Switch role</span>
            <span className="text-[#9b87f5]">
              {user?.role.charAt(0).toUpperCase() + user?.role.slice(1)}
            </span>
          </Button>
          
          {user?.role === 'seller' && (
            <Button
              onClick={() => navigate('/seller-role-selection')}
              variant="outline"
              className="w-full justify-between mt-3"
            >
              <span>Change seller type</span>
              <span className="text-[#9b87f5]">
                {user.seller_type === 'unishop' ? 'UniShop' : user.seller_type === 'unifood' ? 'UniFood' : 'Not set'}
              </span>
            </Button>
          )}
          
          {user?.role === 'driver' && (
            <Button
              onClick={() => navigate('/driver-role-selection')}
              variant="outline"
              className="w-full justify-between mt-3"
            >
              <span>Change driver type</span>
              <span className="text-[#9b87f5]">
                {user.driver_type === 'unimove' ? 'UniMove' : user.driver_type === 'unisend' ? 'UniSend' : 'Not set'}
              </span>
            </Button>
          )}
        </div>
        
        <div className="bg-white rounded-lg shadow-sm p-6">
          <AlertDialog>
            <AlertDialogTrigger asChild>
              <Button variant="destructive" className="w-full">
                <LogOut size={16} className="mr-2" />
                Logout
              </Button>
            </AlertDialogTrigger>
            <AlertDialogContent>
              <AlertDialogHeader>
                <AlertDialogTitle>Are you sure you want to logout?</AlertDialogTitle>
                <AlertDialogDescription>
                  You'll need to sign in again to access your account.
                </AlertDialogDescription>
              </AlertDialogHeader>
              <AlertDialogFooter>
                <AlertDialogCancel>Cancel</AlertDialogCancel>
                <AlertDialogAction onClick={handleLogout}>Logout</AlertDialogAction>
              </AlertDialogFooter>
            </AlertDialogContent>
          </AlertDialog>
        </div>
      </div>
      
      {renderBottomNavigation()}
      
      <SkillsManager />
    </div>
  );
};

export default Profile;
